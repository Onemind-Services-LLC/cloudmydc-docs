"use strict";(self.webpackChunkcloudmydc_docs=self.webpackChunkcloudmydc_docs||[]).push([[6217],{3905:(e,t,i)=>{i.d(t,{Zo:()=>s,kt:()=>m});var r=i(7294);function a(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function o(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,r)}return i}function n(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?o(Object(i),!0).forEach((function(t){a(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function l(e,t){if(null==e)return{};var i,r,a=function(e,t){if(null==e)return{};var i,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)i=o[r],t.indexOf(i)>=0||(a[i]=e[i]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)i=o[r],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var d=r.createContext({}),p=function(e){var t=r.useContext(d),i=t;return e&&(i="function"==typeof e?e(t):n(n({},t),e)),i},s=function(e){var t=p(e.components);return r.createElement(d.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var i=e.components,a=e.mdxType,o=e.originalType,d=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=p(i),u=a,m=c["".concat(d,".").concat(u)]||c[u]||h[u]||o;return i?r.createElement(m,n(n({ref:t},s),{},{components:i})):r.createElement(m,n({ref:t},s))}));function m(e,t){var i=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=i.length,n=new Array(o);n[0]=u;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l[c]="string"==typeof e?e:a,n[1]=l;for(var p=2;p<o;p++)n[p]=i[p];return r.createElement.apply(null,n)}return r.createElement.apply(null,i)}u.displayName="MDXCreateElement"},9972:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>u,frontMatter:()=>n,metadata:()=>d,toc:()=>s});var r=i(7462),a=(i(7294),i(3905));const o=JSON.parse('{"pY":["LABEL maintainer=\'Virtuozzo\'","ENV WILDFLY_VERSION 13.0.0.Final","","ENV ADMIN_USER jelastic","","ENV ADMIN_PASSWORD jelastic"],"yc":["RUN cd /opt && curl -O https://download.jboss.org/wildfly/${WILDFLY_VERSION}/wildfly-${WILDFLY_VERSION}.tar.gz \\\\ ","&& $(which tar) xf wildfly-${WILDFLY_VERSION}.tar.gz   ","&& rm wildfly-${WILDFLY_VERSION}.tar.gz"],"qp":["RUN echo -en \\"JAVA_HOME=\\\\\\"/usr/lib/jvm/java\\\\\\"\\"\\n","\\"JBOSS_HOME=\\\\\\"/opt/wildfly\\\\\\"\\"\\n","\\"JBOSS_USER=wildfly\\"\\n","\\"JBOSS_MODE=standalone\\"\\n","\\"JBOSS_CONFIG=standalone.xml\\"\\n","\\"STARTUP_WAIT=60\\"\\n","\\"SHUTDOWN_WAIT=60\\"\\n","\\"JBOSS_CONSOLE_LOG=\\\\\\"/var/log/wildfly/console.log\\\\\\"\\"\\n","\\"JBOSS_OPTS=\\\\\\"-b 0.0.0.0 -bmanagement=0.0.0.0 -Djboss.management.http.port=4949 -Djboss.management.https.port=4848\\\\\\" >> /etc/default/wildfly\\""],"J0":["RUN wget https://raw.githubusercontent.com/wildfly/wildfly-core/master/core-feature-pack/src/main/resources/content/docs/contrib/scripts/init.d/wildfly-init-redhat.sh -O /etc/rc.d/init.d/wildfly;","sed -i \\"/# Source function library/a\\\\SYSTEMCTL_SKIP_REDIRECT=1\\" /etc/init.d/wildfly; chmod +x /etc/init.d/wildfly;"],"Tg":["RUN chkconfig --add wildfly; chkconfig wildfly on; mkdir -p /var/log/wildfly; adduser wildfly;","chown -R wildfly:wildfly /opt/wildfly-$WILDFLY_VERSION /opt/wildfly /var/log/wildfly;"]}'),n={sidebar_position:9},l=void 0,d={unversionedId:"Container/Building Custom Container",id:"Container/Building Custom Container",title:"Building Custom Container",description:"!incomplete",source:"@site/docs/Container/Building Custom Container.md",sourceDirName:"Container",slug:"/Container/Building Custom Container",permalink:"/docs/Container/Building Custom Container",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Container/Building Custom Container.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"Private Registry inside PaaS",permalink:"/docs/Container/Private Registry inside PaaS"},next:{title:"Environment Management",permalink:"/docs/category/environment-management"}},p={},s=[{value:"Composing Dockerfile",id:"composing-dockerfile",level:2},{value:"Adding Image to Repository",id:"adding-image-to-repository",level:2}],c={toc:s},h="wrapper";function u(e){let{components:t,...n}=e;return(0,a.kt)(h,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"!incomplete"),(0,a.kt)("p",null,"With the platform, the process of preparing your own Docker image can be greatly simplified by building it on the basis of the already existing one (namely - on the top of the platform ",(0,a.kt)("strong",{parentName:"p"},"CentOS 7")," base template). This allows to skip all the steps, that are already accomplished within that \u201cparent\u201d template, and add the required adjustments only. We\u2019ll consider this procedure on the example of preparing custom ",(0,a.kt)("a",{parentName:"p",href:"https://cloudmydc.com/"},"WildFly")," image - flexible and lightweight Java application server, which is a direct successor of the popular JBoss one."),(0,a.kt)("div",{style:{display:"flex",justifyContent:"center",margin:"0 0 1rem 0"}},(0,a.kt)("p",null,(0,a.kt)("img",{alt:"Locale Dropdown",src:i(2450).Z,width:"709",height:"242"}))),(0,a.kt)("p",null,"The most common way of building Docker images is composing a ",(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("em",{parentName:"strong"},"Dockerfile"))," - special manifest, which allows achieving the additional automation through listing the desired commands into a simple text file, which will be read and executed by Docker daemon. In such a way, a new template will be created automatically basing on the comprised instructions (while otherwise, you need to call every necessary operation manually, one by one)."),(0,a.kt)("p",null,"Below, we\u2019ll consider all the specifics of a custom image running at our platform, and, as a result, you\u2019ll get the ready-to-work dockerized version of the WildFly server right inside the platform."),(0,a.kt)("p",null,"So, let\u2019s walk through the required operations step-by-step:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://cloudmydc.com/"},"composing dockerfile")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://cloudmydc.com/"},"adding image to repository")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://cloudmydc.com/"},"deploying image at the platform"))),(0,a.kt)("h2",{id:"composing-dockerfile"},"Composing Dockerfile"),(0,a.kt)("p",null,"To start with, create an empty text file - we\u2019ll declare all the appropriate operations directly in it - and proceed with the following instructions."),(0,a.kt)("admonition",{title:"Note",type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"This sections is exploratory in its nature and includes just the required basis for your dockerfile preparation. However, if you\u2019d like to dive into the specifics of the process and get more detailed guidance, you can examine the official ",(0,a.kt)("a",{parentName:"p",href:"https://cloudmydc.com/"},"dockerfile references"),"."),(0,a.kt)("p",{parentName:"admonition"},"Also, you can ",(0,a.kt)("a",{parentName:"p",href:"https://cloudmydc.com/"},"download")," the already prepared dockerfile (with our WildFly image example) in advance and just look through this section for the performed actions explanations, skipping the manual file creation.")),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"The initial step is specifying the base template for our image building - we\u2019ll use the jelasticdocker/jelastic-centos7-base one with the already configured ",(0,a.kt)("strong",{parentName:"li"},"CentOS 7")," operating system inside. In order to set this within dockerfile, the FROM instruction should be used:")),(0,a.kt)("div",{style:{width:"100%",border:"1px solid #eee",borderRadius:"7px",boxShadow:"rgba(0, 0, 0, 0.16) 0px 1px 4px",overflow:"hidden",margin:"0 0 1rem 0",background:"white"}},(0,a.kt)("div",{style:{display:"flex"}},(0,a.kt)("div",{style:{width:"5%",background:"red",padding:"10px 20px 10px 20px",color:"white"}},"1"),(0,a.kt)("div",{style:{padding:"10px 20px 5px 20px"}},"FROM jelasticdocker/jelastic-centos7-base:latest"))),(0,a.kt)("ol",{start:2},(0,a.kt)("li",{parentName:"ol"},"Next, you can specify the general image information (like metadata or some internal variables), which will be required during the further configurations. Use the example below to set the needed values:")),(0,a.kt)("div",{style:{width:"100%",border:"1px solid #eee",borderRadius:"7px",boxShadow:"rgba(0, 0, 0, 0.16) 0px 1px 4px",overflow:"hidden",margin:"0 0 1rem 0",background:"white"}},o.pY.map(((e,t)=>(0,a.kt)("div",{key:t,style:{display:"flex"}},(0,a.kt)("div",{style:{width:"5%",background:"red",padding:t!==o.pY.length-1?"10px 20px 5px 20px":"10px 20px 10px 20px",color:"white"}},t+1),(0,a.kt)("div",{style:{padding:t!==o.pY.length-1?"10px 20px 5px 20px":"10px 20px 10px 20px"}},e))))),(0,a.kt)("p",null,"where:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"LABEL"),"- allows you to set image metadata via the appropriate key-value pairs (e.g. the author of the Docker image, its version, etc.)"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"ENV"),"- sets the main environment variables, i.e.:",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"WILDFLY_VERSION")," - version of WildFly to build; can be changed to another release if necessary (get the list of the currently ",(0,a.kt)("a",{parentName:"li",href:"https://cloudmydc.com/"},"available versions"),")"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"ADMIN_USER")," - the arbitrary administrator name for the subsequent accessing WildFly admin panel"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("em",{parentName:"li"},"ADMIN_PASSWORD"),"- the desired password for the specified user")))),(0,a.kt)("ol",{start:3},(0,a.kt)("li",{parentName:"ol"},"Now, you can declare the required configurations using the shell commands - the RUN operator should be used for this purpose.")),(0,a.kt)("p",null,"First of all, you need to install the Java Development Kit (",(0,a.kt)("strong",{parentName:"p"},"OpenJDK")," of the 8th version in our case) and the tar archiver (which will be used for decompressing the downloaded files):"),(0,a.kt)("div",{style:{width:"100%",border:"1px solid #eee",borderRadius:"7px",boxShadow:"rgba(0, 0, 0, 0.16) 0px 1px 4px",overflow:"hidden",margin:"0 0 1rem 0",background:"white"}},(0,a.kt)("div",{style:{display:"flex"}},(0,a.kt)("div",{style:{width:"5%",background:"red",padding:"10px 20px 10px 20px",color:"white"}},"1"),(0,a.kt)("div",{style:{padding:"10px 20px 5px 20px"}},"RUN yum -y install java-1.8.0-openjdk-devel tar && yum -y update;"))),(0,a.kt)("p",null,"This command ends with calling the installed packages' general update."),(0,a.kt)("ol",{start:4},(0,a.kt)("li",{parentName:"ol"},"Next, let\u2019s declare a few additional operations for downloading the WildFly source code from the official website and extracting it to the ",(0,a.kt)("strong",{parentName:"li"},"/opt")," folder.")),(0,a.kt)("div",{style:{width:"100%",border:"1px solid #eee",borderRadius:"7px",boxShadow:"rgba(0, 0, 0, 0.16) 0px 1px 4px",overflow:"hidden",margin:"0 0 1rem 0",background:"white"}},o.yc.map(((e,t)=>(0,a.kt)("div",{key:t,style:{display:"flex"}},(0,a.kt)("div",{style:{width:"5%",background:"red",padding:t!==o.pY.length-1?"10px 20px 5px 20px":"10px 20px 10px 20px",color:"white"}},t+1),(0,a.kt)("div",{style:{padding:t!==o.pY.length-1?"10px 20px 5px 20px":"10px 20px 10px 20px"}},e))))),(0,a.kt)("ol",{start:5},(0,a.kt)("li",{parentName:"ol"},"At this step, you need to create a symlink in order to shorten the path to the WildFly main directory and, as a result, to make it easily accessible:")),(0,a.kt)("div",{style:{width:"100%",border:"1px solid #eee",borderRadius:"7px",boxShadow:"rgba(0, 0, 0, 0.16) 0px 1px 4px",overflow:"hidden",margin:"0 0 1rem 0",background:"white"}},(0,a.kt)("div",{style:{display:"flex"}},(0,a.kt)("div",{style:{width:"5%",background:"red",padding:"10px 20px 10px 20px",color:"white"}},"1"),(0,a.kt)("div",{style:{padding:"10px 20px 5px 20px"}},"RUN ln -s /opt/wildfly-$WILDFLY_VERSION /opt/wildfly"))),(0,a.kt)("ol",{start:6},(0,a.kt)("li",{parentName:"ol"},"Let\u2019s proceed with creation of the main configuration file for our WildFly server and putting all the needed options to it:")),(0,a.kt)("div",{style:{width:"100%",border:"1px solid #eee",borderRadius:"7px",boxShadow:"rgba(0, 0, 0, 0.16) 0px 1px 4px",overflow:"hidden",margin:"0 0 1rem 0",background:"white"}},o.qp.map(((e,t)=>(0,a.kt)("div",{key:t,style:{display:"flex"}},(0,a.kt)("div",{style:{width:"5%",background:"red",padding:t!==o.pY.length-1?"10px 20px 5px 20px":"10px 20px 10px 20px",color:"white"}},t+1),(0,a.kt)("div",{style:{padding:t!==o.pY.length-1?"10px 20px 5px 20px":"10px 20px 10px 20px"}},e))))),(0,a.kt)("ol",{start:7},(0,a.kt)("li",{parentName:"ol"},"CentOS 7 is started using the Systemd initiation script by default, but WildFly server requires the more traditional SystemV Init one, thus you need to copy the default initscript to the ",(0,a.kt)("strong",{parentName:"li"},"/etc/init.d")," folder and edit the appropriate configs to avoid the systemd redirect:")),(0,a.kt)("div",{style:{width:"100%",border:"1px solid #eee",borderRadius:"7px",boxShadow:"rgba(0, 0, 0, 0.16) 0px 1px 4px",margin:"0 0 1rem 0",background:"white",overflow:"hidden"}},o.J0.map(((e,t)=>(0,a.kt)("div",{key:t,style:{display:"flex"}},(0,a.kt)("div",{style:{width:"5%",background:"red",padding:t!==o.pY.length-1?"10px 20px 5px 20px":"10px 20px 10px 20px",color:"white"}},t+1),(0,a.kt)("div",{style:{padding:t!==o.pY.length-1?"10px 20px 5px 20px":"10px 20px 10px 20px"}},e))))),(0,a.kt)("ol",{start:8},(0,a.kt)("li",{parentName:"ol"},"Next, we\u2019ll state WildFly to be run on container startup by adding the corresponding system user and changing files' ownership for him:")),(0,a.kt)("div",{style:{width:"100%",border:"1px solid #eee",borderRadius:"7px",boxShadow:"rgba(0, 0, 0, 0.16) 0px 1px 4px",margin:"0 0 1rem 0",background:"white",overflow:"hidden"}},o.Tg.map(((e,t)=>(0,a.kt)("div",{key:t,style:{display:"flex"}},(0,a.kt)("div",{style:{width:"5%",background:"red",padding:t!==o.pY.length-1?"10px 20px 5px 20px":"10px 20px 10px 20px",color:"white"}},t+1),(0,a.kt)("div",{style:{padding:t!==o.pY.length-1?"10px 20px 5px 20px":"10px 20px 10px 20px"}},e))))),(0,a.kt)("ol",{start:9},(0,a.kt)("li",{parentName:"ol"},"Also, let\u2019s add the user credentials we\u2019ve defined within the 1st instruction step for accessing the server\u2019s admin panel:")),(0,a.kt)("ol",{start:10},(0,a.kt)("li",{parentName:"ol"},"Now, we can correct a link to the admin panel itself at the default index.html page by defining the corresponding redirect (as in case our image will be deployed to a container without the external IP attached, port 4949 and HTTP connection should be used here):")),(0,a.kt)("ol",{start:11},(0,a.kt)("li",{parentName:"ol"},"Add the English locale settings to the container.")),(0,a.kt)("ol",{start:12},(0,a.kt)("li",{parentName:"ol"},"Another required action is to set our Docker image to listen to the required ports at the runtime. The EXPOSE instruction is intended for this:")),(0,a.kt)("ol",{start:13},(0,a.kt)("li",{parentName:"ol"},"Lastly, you need to set the ENTRYPOINT for defining a container to be run as executable. In our case, the bash shell should be specified:")),(0,a.kt)("p",null,"That\u2019s all! Just don\u2019t forget to save all the declared settings to get the ready-to-go dockerfile."),(0,a.kt)("h2",{id:"adding-image-to-repository"},"Adding Image to Repository"),(0,a.kt)("p",null,"Once the proper dockerfile is prepared, you are ready to build your WildFly image on its base and, subsequently, push it to the repository."),(0,a.kt)("admonition",{title:"Note",type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Before starting, ensure you have the appropriate Docker CE version (according to the used OS type) ",(0,a.kt)("a",{parentName:"p",href:"https://cloudmydc.com/"},"installed")," for executing the below described commands at the currently used machine.")))}u.isMDXComponent=!0},2450:(e,t,i)=>{i.d(t,{Z:()=>r});const r=i.p+"assets/images/01-building-wildfly-docker-image-b0ef48035ae9ae3df748bbd866964294.png"}}]);